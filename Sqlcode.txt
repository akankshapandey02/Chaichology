#List all tea shop details 

select * from tea_shops 

#Find Menu Items Available in the Shop

SELECT * FROM chai.menu_items
where available is not null;

#Find the Total Number of Orders for Each Menu Item
	
SELECT mi.item_name,count(*) as Total_count, (select sum(quantity) ) as Total_quantity 
FROM chai.menu_items mi
join sales s 
on mi.item_id= s.item_id
group by mi.item_name;

#Find the Total Revenue Generated by Each Shop in Different Locations

SELECT ts.shop_id ,ts.city,sum(s.quantity*mi.price) as Total_Revenue
FROM tea_shops ts
join sales s
on s.shop_id=ts.shop_id
join menu_items mi
on s.item_id=mi.item_id
group by ts.shop_id,ts.city;

#Find the Best-Selling Item

select m.item_name, sum(s.quantity) as best_seller 
from menu_items m
join sales s
on m.item_id=s.item_id 
group by m.item_name
order by  best_seller desc limit 1;

#Count the Total Number of Ratings and average rating for Each Shop

select shop_id, count(rating) as total_rating, avg(rating) as avg from ratings r
join tea_shops t using(shop_id)
group by shop_id 
order by total_rating;

#List All Shops with an Average Rating Above 4.5

select shop_id,  round(avg(rating),2) as avg from ratings r
join tea_shops t using(shop_id)
group by shop_id 
having avg>4.5

#Find reviews where customers used the word "amazing" for a shop in Bangalore

select r.shop_id, t.city,r.review from  tea_shops t
join ratings r using(shop_id)
where review like '%amazing%';

#Find the names of customers who rated above 4.5 and also made at least one purchase from the same shop.

select shop_id, customer_name, round(avg(rating),2) as avg from ratings r
join tea_shops t using(shop_id)
group by shop_id, customer_name 
having avg>4.5 

# or by cte 

WITH high_ratings AS (
    SELECT customer_name, shop_id, rating
    FROM ratings
    WHERE rating > 4.5
)
SELECT hr.customer_name, hr.shop_id, hr.rating
FROM high_ratings hr
JOIN sales s ON hr.shop_id = s.shop_id
GROUP BY hr.customer_name, hr.shop_id, hr.rating
order by shop_id;

# Find the top 3 items sold based on total quantity across all shops. Show item name and total quantity.

WITH item_totals AS (
    SELECT 
        mi.item_name,
        SUM(s.quantity) AS total_quantity
    FROM sales s
    JOIN menu_items mi ON s.item_id = mi.item_id
    GROUP BY mi.item_name
),
ranked_items AS (
    SELECT 
        item_name,
        total_quantity,
        RANK() OVER (ORDER BY total_quantity DESC) AS rnk
    FROM item_totals)
SELECT item_name, total_quantity
FROM ranked_items
WHERE rnk <= 3;
select max(quantity) as most_sales ,transaction_date
 from sales
 where quantity 
 group by transaction_date
 

#Find the day with the most sales

 SELECT 
    transaction_date,
    SUM(quantity) AS total_quantity
FROM sales
GROUP BY transaction_date
ORDER BY total_quantity DESC
LIMIT 1;